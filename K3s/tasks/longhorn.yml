# Add and Install Longhorn
- name: Add Longhorn repo
  kubernetes.core.helm_repository:
    name: longhorn
    repo_url: "https://charts.longhorn.io"
- name: Install Longhorn
  kubernetes.core.helm:
    update_repo_cache: yes
    name: longhorn
    namespace: longhorn-system
    create_namespace: yes
    chart_ref: longhorn/longhorn
    wait: yes
    values:
      # More values here: https://github.com/longhorn/longhorn/blob/master/chart/values.yaml
      defaultSettings:
        # TODO: document nfs and how it should be changed
        nodeDownPodDeletionPolicy: delete-both-statefulset-and-deployment-pod
      persistence:
        defaultDataLocality: best-effort

# Edit reserve amounts
- name: Wait until all lhn hosts are found
  command: "kubectl get lhn -n longhorn-system"
  register: status
  retries: 10
  delay: 5
  until: groups.cluster | reject('in', status.stdout) | list | length == 0
  failed_when: groups.cluster | reject('in', status.stdout) | list | length != 0
  changed_when: false
- name: Change the reserved amount
  kubernetes.core.k8s:
    api_version: longhorn.io/v1beta1
    state: patched
    kind: lhn
    name: "{{ item }}"
    namespace: longhorn-system
    # The below 'storageReserved: 34359738368' field is to indicate 32gb of reserved space per host, for OS and outside applications. Adjust accordingly.
    definition: |
      spec:
        disks:
          {{ query('kubernetes.core.k8s', kind='lhn', namespace='longhorn-system', resource_name=item, api_version='longhorn.io/v1beta1')[0].spec.disks.keys() | join() }}:
            storageReserved: 34359738368
  loop: "{{ groups.cluster }}"

# Create or get, then apply, lh auth secret
- name: Make sure we can read data from vault-lh-auth-token file
  shell: ANSIBLE_CONFIG=../ansible.cfg ansible-vault view ~/.HAB/vault-lh-auth-token
  register: lhAuthTokenResults
  changed_when: false
  failed_when: false
  no_log: true
- name: Create a new password for LongHorn
  when: lhAuthTokenResults.rc != 0
  shell: /usr/bin/openssl rand -base64 63 | tr -d '\n'
  register: newPassword
  no_log: true
- name: Write newPassword for vault-lh-auth-token to file if needed
  when: lhAuthTokenResults.rc != 0
  shell: 'echo "lhPassword: admin {{ newPassword.stdout }}" | ANSIBLE_CONFIG=../ansible.cfg ansible-vault encrypt --output ~/.HAB/vault-lh-auth-token'
  no_log: true
- name: Set longhorn password
  set_fact:
    lhPassword: "{{ lookup('file', '~/.HAB/vault-lh-auth-token').split(' ')[2] }}"
  no_log: true
- name: Get auth token
  shell: echo "admin:$(/usr/bin/openssl passwd -stdin -6 <<< {{ lhPassword }})"
  register: authToken
  changed_when: lhAuthTokenResults.rc != 0
  no_log: true
- name: Get base64 of auth token
  shell: "echo '{{ authToken.stdout }}' | base64"
  register: base64Auth
  changed_when: lhAuthTokenResults.rc != 0
  no_log: true
- name: Install longhorn auth secret
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: v1
      kind: Secret
      metadata:
        name: basic-auth
        namespace: longhorn-system
      type: Opaque
      data:
        auth: "{{ base64Auth.stdout }}"
  changed_when: lhAuthTokenResults.rc != 0

# Create longhorn ingress and certs for https using auth secret
- name: Install longhorn ingress
  kubernetes.core.k8s:
    src: ../charts/longhorn/ingress.yml
    state: present
    wait: yes
- name: Install longhorn certificate
  kubernetes.core.k8s:
    src: ../charts/longhorn/cert.yml
    state: present
    wait: yes

# Create or get, then install lh encryption secret to encrypt volumes
- name: Make sure we can read data from vault-lh-encryption-token file
  shell: ANSIBLE_CONFIG=../ansible.cfg ansible-vault view ~/.HAB/vault-lh-encryption-token
  register: lhEncryptionSecretResults
  changed_when: false
  failed_when: false
  no_log: true
- name: Create a new encryption secret for LongHorn
  when: lhEncryptionSecretResults.rc != 0
  shell: /usr/bin/openssl rand -base64 63 | tr -d '\n'
  register: newSecret
  no_log: true
- name: Write new encryption secret for vault-lh-encryption-token to file if needed
  when: lhEncryptionSecretResults.rc != 0
  shell: 'echo "encryptionSecret: {{ newSecret.stdout }}" | ANSIBLE_CONFIG=../ansible.cfg ansible-vault encrypt --output ~/.HAB/vault-lh-encryption-token'
  no_log: true
- name: Get longhorn encryption secret
  set_fact:
    lhEncryptionSecret: "{{ lookup('file', '~/.HAB/vault-lh-encryption-token').split(' ')[1] }}"
  no_log: true
- name: Install longhorn Encryption Secret
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: v1
      kind: Secret
      metadata:
        name: longhorn-crypto
        namespace: longhorn-system
      stringData:
        CRYPTO_KEY_VALUE: "{{ lhEncryptionSecret }}"
        CRYPTO_KEY_PROVIDER: "secret"
